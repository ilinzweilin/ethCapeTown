{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Observable,_util_isArray,_empty,_util_subscribeToResult,_OuterSubscriber,_operators_map PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { EMPTY } from './empty';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { map } from '../operators/map';\nexport function forkJoin() {\n  var sources = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    sources[_i] = arguments[_i];\n  }\n\n  var resultSelector;\n\n  if (typeof sources[sources.length - 1] === 'function') {\n    resultSelector = sources.pop();\n  }\n\n  if (sources.length === 1 && isArray(sources[0])) {\n    sources = sources[0];\n  }\n\n  if (sources.length === 0) {\n    return EMPTY;\n  }\n\n  if (resultSelector) {\n    return forkJoin(sources).pipe(map(function (args) {\n      return resultSelector.apply(void 0, args);\n    }));\n  }\n\n  return new Observable(function (subscriber) {\n    return new ForkJoinSubscriber(subscriber, sources);\n  });\n}\n\nvar ForkJoinSubscriber =\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(ForkJoinSubscriber, _super);\n\n  function ForkJoinSubscriber(destination, sources) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.sources = sources;\n    _this.completed = 0;\n    _this.haveValues = 0;\n    var len = sources.length;\n    _this.values = new Array(len);\n\n    for (var i = 0; i < len; i++) {\n      var source = sources[i];\n      var innerSubscription = subscribeToResult(_this, source, null, i);\n\n      if (innerSubscription) {\n        _this.add(innerSubscription);\n      }\n    }\n\n    return _this;\n  }\n\n  ForkJoinSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    this.values[outerIndex] = innerValue;\n\n    if (!innerSub._hasValue) {\n      innerSub._hasValue = true;\n      this.haveValues++;\n    }\n  };\n\n  ForkJoinSubscriber.prototype.notifyComplete = function (innerSub) {\n    var _a = this,\n        destination = _a.destination,\n        haveValues = _a.haveValues,\n        values = _a.values;\n\n    var len = values.length;\n\n    if (!innerSub._hasValue) {\n      destination.complete();\n      return;\n    }\n\n    this.completed++;\n\n    if (this.completed !== len) {\n      return;\n    }\n\n    if (haveValues === len) {\n      destination.next(values);\n    }\n\n    destination.complete();\n  };\n\n  return ForkJoinSubscriber;\n}(OuterSubscriber);","map":null,"metadata":{},"sourceType":"module"}